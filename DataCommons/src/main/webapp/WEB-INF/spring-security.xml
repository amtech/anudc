<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.0.xsd">
	
	<!-- Loads ACL related configurations -->
	<import resource="acl-context.xml" />
	
	<security:http auto-config="true" use-expressions="true" access-denied-page="/jsp/accessdenied.jsp"
			entry-point-ref="customAuthenticationEntryPoint">
		<security:intercept-url pattern="/jsp/pambu/pambuadmin.jsp" access="hasRole('ROLE_ADMIN')"/>
		<security:intercept-url pattern="/**" access="permitAll" />
		
		<security:form-login
			login-page="/login"
			authentication-success-handler-ref="authenticationSuccessHandler"
			authentication-failure-url="/login?error=true" />
		
		<security:logout
			logout-success-url="/jsp/welcome.jsp" />
		
		<security:custom-filter ref="casAuthenticationFilter" after="CAS_FILTER"/>
		<security:custom-filter position="PRE_AUTH_FILTER" ref="tokenFilter" />

	</security:http>
	
	<bean id="customAuthenticationEntryPoint" class="au.edu.anu.datacommons.security.CustomAuthenticationEntryPoint" />
	
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider ref="casAuthenticationProvider" />
	 	<security:authentication-provider ref="ldapAuthProvider" />
		<security:authentication-provider ref="daoAuthenticationProvider" />
		<security:authentication-provider ref="preauthAuthProvider" />
	</security:authentication-manager>
	
	<security:ldap-server url="${ldap.uri}" manager-dn="" manager-password="" />
	
	<bean id="contextSource" class="org.springframework.security.ldap.DefaultSpringSecurityContextSource">
		<constructor-arg value="${ldap.uri}" />
	<!-- 	<property name="userDn" value="" /> -->
		<property name="password" value="password" />
	</bean>

	<!-- Preauth begin -->
	<bean id="preauthAuthProvider" class="org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider">
		<property name="preAuthenticatedUserDetailsService">
			<bean id="userDetailsServiceWrapper" class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">
				<property name="userDetailsService" ref="userService" />
			</bean>
		</property>
	</bean>

	<bean id="tokenFilter" class="au.edu.anu.datacommons.security.tokenauth.TokenHeaderAuthenticationFilter">
		<property name="authenticationManager" ref="authenticationManager" />
	</bean>
	
	<!-- Preauth end -->
    
	<bean id="ldapAuthProvider" class="org.springframework.security.ldap.authentication.LdapAuthenticationProvider">
		<constructor-arg>
			<bean class="org.springframework.security.ldap.authentication.BindAuthenticator">
				<constructor-arg ref="contextSource" />
				<property name="userDnPatterns">
					<list><value>uid={0},ou=people,o=anu.edu.au</value></list>
				</property>
			</bean>
		</constructor-arg>
		<property name="userDetailsContextMapper" ref="ldapUserDetailsContextMapper" />
	</bean>
	
	<bean id="ldapUserDetailsContextMapper" class="au.edu.anu.datacommons.security.ldap.ANUUserDetailsContextMapper" />
	
	
	<bean id="casAuthenticationFilter" class="org.springframework.security.cas.web.CasAuthenticationFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="authenticationFailureHandler">
			<bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
				<property name="defaultFailureUrl" value="/jsp/casfailed.jsp" />
			</bean>
		</property>
		<property name="authenticationSuccessHandler">
			<bean class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
				<property name="defaultTargetUrl" value="/" />
			</bean>
		</property>
	</bean>
	
	<bean id="authenticationSuccessHandler" class="au.edu.anu.datacommons.security.CustomSuccessHandler">
		<property name="defaultTargetUrl" value="/" />
	</bean>
	
	<bean id="casProcessingFilterEntryPoint" class="org.springframework.security.cas.web.CasAuthenticationEntryPoint">
		<property name="loginUrl" value="${cas.server}/login" />
		<property name="serviceProperties" ref="serviceProperties" />
	</bean>
	
	<bean id="casAuthenticationProvider" class="org.springframework.security.cas.authentication.CasAuthenticationProvider">
		<property name="userDetailsService" ref="userService" />
		<property name="serviceProperties" ref="serviceProperties" />
		<property name="ticketValidator">
			<bean class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">
				<constructor-arg index="0" value="${cas.server}" />
			</bean>
		</property>
		<property name="key" value="an_id_for_this_auth_provider_only" />
	</bean>

	<bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties">
		<property name="service" value="${app.server}/DataCommons/j_spring_cas_security_check" />
		<property name="sendRenew" value="false" />
	</bean>
	
	<bean id="userService" class="au.edu.anu.datacommons.security.cas.ANUUserDetailsService">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="daoAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<property name="userDetailsService" ref="daoUserService" />
		<property name="passwordEncoder" ref="passwordEncoder" />
		<property name="saltSource" ref="saltSource" />
	</bean>
	
	<bean id="daoUserService" class="au.edu.anu.datacommons.security.registered.RegisteredUserDetails">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder" />
	
	<bean id="saltSource" class="org.springframework.security.authentication.dao.ReflectionSaltSource">
		<property name="userPropertyToUse" value="username" />
	</bean>
	
</beans>
